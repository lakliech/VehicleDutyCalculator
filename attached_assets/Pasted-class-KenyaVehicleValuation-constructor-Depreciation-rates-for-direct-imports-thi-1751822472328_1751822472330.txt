class KenyaVehicleValuation {
  constructor() {
    // Depreciation rates for direct imports
    this.directImportDepreciation = [
      { minYears: 1, maxYears: 2, rate: 0.2 },
      { minYears: 2, maxYears: 3, rate: 0.3 },
      { minYears: 3, maxYears: 4, rate: 0.4 },
      { minYears: 4, maxYears: 5, rate: 0.5 },
      { minYears: 5, maxYears: 6, rate: 0.55 },
      { minYears: 6, maxYears: 7, rate: 0.6 },
      { minYears: 7, maxYears: 8, rate: 0.65 }
    ];

    // Depreciation rates for previously registered vehicles
    this.previouslyRegisteredDepreciation = [
      { years: 1, rate: 0.2 },
      { years: 2, rate: 0.35 },
      { years: 3, rate: 0.5 },
      { years: 4, rate: 0.6 },
      { years: 5, rate: 0.7 },
      { years: 6, rate: 0.75 },
      { years: 7, rate: 0.8 },
      { years: 8, rate: 0.83 },
      { years: 9, rate: 0.86 },
      { years: 10, rate: 0.89 },
      { years: 11, rate: 0.9 },
      { years: 12, rate: 0.91 },
      { years: 13, rate: 0.92 },
      { years: 14, rate: 0.93 },
      { years: 15, rate: 0.94 },
      { years: 16, rate: 0.95 } // For over 15 years
    ];
  }

  // Get depreciation rate based on vehicle type and age
  getDepreciationRate(vehicleType, ageYears) {
    if (vehicleType === 'direct') {
      for (const range of this.directImportDepreciation) {
        if (ageYears > range.minYears && ageYears <= range.maxYears) {
          return range.rate;
        }
      }
      return 0; // No depreciation for vehicles â‰¤1 year old
    } else if (vehicleType === 'previouslyRegistered') {
      for (const item of this.previouslyRegisteredDepreciation) {
        if (ageYears <= item.years) {
          return item.rate;
        }
      }
      return this.previouslyRegisteredDepreciation[this.previouslyRegisteredDepreciation.length - 1].rate;
    }
    return 0;
  }

  // Calculate taxes for a vehicle
  calculateTaxes(price, vehicleCategory, isDirectImport = true, ageYears = 0) {
    // Apply depreciation
    const depreciationRate = this.getDepreciationRate(
      isDirectImport ? 'direct' : 'previouslyRegistered',
      ageYears
    );
    const depreciatedPrice = price * (1 - depreciationRate);

    // Initialize result object
    const result = {
      currentRetailPrice: price,
      depreciationRate: depreciationRate,
      depreciatedPrice: depreciatedPrice,
      customsValue: 0,
      importDuty: 0,
      exciseValue: 0,
      exciseDuty: 0,
      vatValue: 0,
      vat: 0,
      rdl: 0,
      idfFees: 0,
      totalTaxes: 0
    };

    // Calculate based on vehicle category
    switch (vehicleCategory) {
      case 'under1500cc':
        result.customsValue = depreciatedPrice * 0.45977;
        result.importDuty = result.customsValue * 0.35;
        result.exciseValue = result.customsValue + result.importDuty;
        result.exciseDuty = isDirectImport ? result.exciseValue * 0.2 : result.exciseValue * 0.2;
        result.vatValue = result.exciseValue + result.exciseDuty;
        result.vat = result.vatValue * 0.16;
        result.rdl = result.vatValue * 0.0069;
        result.idfFees = result.vatValue * 0.0115;
        break;

      case 'over1500cc':
        result.customsValue = depreciatedPrice * 0.45977;
        result.importDuty = result.customsValue * 0.35;
        result.exciseValue = result.customsValue + result.importDuty;
        result.exciseDuty = isDirectImport ? result.exciseValue * 0.25 : result.exciseValue * 0.25;
        result.vatValue = result.exciseValue + result.exciseDuty;
        result.vat = result.vatValue * 0.16;
        result.rdl = result.vatValue * 0.0069;
        result.idfFees = result.vatValue * 0.0115;
        break;

      case 'largeEngine':
        // For petrol >3000cc or diesel >2500cc
        result.customsValue = depreciatedPrice * 0.4244;
        result.importDuty = result.customsValue * 0.35;
        result.exciseValue = result.customsValue + result.importDuty;
        result.exciseDuty = isDirectImport ? result.exciseValue * 0.35 : result.exciseValue * 0.35;
        result.vatValue = result.exciseValue + result.exciseDuty;
        result.vat = result.vatValue * 0.16;
        result.rdl = result.vatValue * 0.0064;
        result.idfFees = result.vatValue * 0.0106;
        break;

      case 'electric':
        result.customsValue = depreciatedPrice * 0.45977;
        result.importDuty = result.customsValue * 0.25;
        result.exciseValue = result.customsValue + result.importDuty;
        result.exciseDuty = isDirectImport ? result.exciseValue * 0.1 : result.exciseValue * 0.1;
        result.vatValue = result.exciseValue + result.exciseDuty;
        result.vat = result.vatValue * 0.16;
        result.rdl = result.vatValue * 0.0069;
        result.idfFees = result.vatValue * 0.0115;
        break;

      case 'schoolBus':
        result.customsValue = depreciatedPrice * 0.45977;
        result.importDuty = result.customsValue * 0.35;
        result.exciseValue = result.customsValue + result.importDuty;
        result.exciseDuty = isDirectImport ? result.exciseValue * 0.25 : result.exciseValue * 0.25;
        result.vatValue = result.exciseValue + result.exciseDuty;
        result.vat = result.vatValue * 0.16;
        result.rdl = result.vatValue * 0.0069;
        result.idfFees = result.vatValue * 0.0115;
        break;

      case 'primeMover':
        result.customsValue = depreciatedPrice * 0.62696;
        result.importDuty = result.customsValue * 0.25;
        result.exciseValue = 0;
        result.exciseDuty = 0;
        result.vatValue = result.customsValue + result.importDuty;
        result.vat = result.vatValue * 0.16;
        result.rdl = result.vatValue * 0.0094;
        result.idfFees = result.vatValue * 0.0157;
        break;

      case 'trailer':
        result.customsValue = depreciatedPrice * 0.62696;
        result.importDuty = isDirectImport ? result.customsValue * 0.35 : result.customsValue * 0.36;
        result.exciseValue = 0;
        result.exciseDuty = 0;
        result.vatValue = result.customsValue + result.importDuty;
        result.vat = result.vatValue * 0.16;
        result.rdl = result.vatValue * 0.0094;
        result.idfFees = result.vatValue * 0.0157;
        break;

      case 'ambulance':
        result.customsValue = depreciatedPrice * 0.57471;
        result.importDuty = 0;
        result.exciseValue = result.customsValue;
        result.exciseDuty = isDirectImport ? result.exciseValue * 0.25 : result.exciseValue * 0.25;
        result.vatValue = result.exciseValue + result.exciseDuty;
        result.vat = result.vatValue * 0.16;
        result.rdl = result.vatValue * 0.0086;
        result.idfFees = result.vatValue * 0.0144;
        break;

      case 'motorcycle':
        result.customsValue = depreciatedPrice * 0.55172;
        result.importDuty = result.customsValue * 0.25;
        result.exciseValue = 0;
        // Note: There seems to be an error in the template with excise duty of 12952.83
        // This needs to be verified with actual regulations
        result.exciseDuty = 12952.83; // This seems incorrect - needs verification
        result.vatValue = result.customsValue + result.importDuty + result.exciseDuty;
        result.vat = result.vatValue * 0.16;
        result.rdl = result.vatValue * 0.0083;
        result.idfFees = result.vatValue * 0.0138;
        break;

      case 'specialPurpose':
        result.customsValue = depreciatedPrice * 0.68966;
        result.importDuty = 0;
        result.exciseValue = 0;
        result.exciseDuty = 0;
        result.vatValue = isDirectImport ? result.customsValue : 0;
        result.vat = result.vatValue * 0.16;
        result.rdl = result.vatValue * 0.0103;
        result.idfFees = result.vatValue * 0.0172;
        break;

      case 'heavyMachinery':
        result.customsValue = isDirectImport ? depreciatedPrice * 0.68966 : 800; // Template shows 800 for previously registered
        result.importDuty = 0;
        result.exciseValue = 0;
        result.exciseDuty = 0;
        result.vatValue = 800; // Both cases show 800 in template
        result.vat = result.vatValue * 0.16;
        result.rdl = result.vatValue * 0.0103;
        result.idfFees = result.vatValue * 0.0172;
        break;

      default:
        throw new Error('Unknown vehicle category');
    }

    // Calculate total taxes
    if (isDirectImport) {
      result.totalTaxes = result.importDuty + result.exciseDuty + result.vat + result.rdl + result.idfFees;
    } else {
      result.totalTaxes = result.importDuty + result.exciseDuty + result.vat;
    }

    // Round all values to 2 decimal places
    for (const key in result) {
      if (typeof result[key] === 'number') {
        result[key] = Math.round(result[key] * 100) / 100;
      }
    }

    return result;
  }
}

// Example usage:
const calculator = new KenyaVehicleValuation();

// Calculate for a direct import under 1500cc, 3 years old, price 1,000,000 KES
const result = calculator.calculateTaxes(1000000, 'under1500cc', true, 3);
console.log(result);

// Calculate for a previously registered over 1500cc, 5 years old, price 1,500,000 KES
const result2 = calculator.calculateTaxes(1500000, 'over1500cc', false, 5);
console.log(result2);